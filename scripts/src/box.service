#!/system/bin/sh

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})
source /data/adb/box/settings.ini

delete_logs() {
  for list in "${bin_list[@]}" ; do
      rm -rf "${run_path}/${list}.log"
  done
  find "${run_path}" -type f -name "root" | xargs rm -f
  find "${run_path}" -type f -name "*.yaml" | xargs rm -f
  find "${run_path}" -type f -name "*.list" | xargs rm -f
  find "${run_path}" -type f -name "*.inotify.log" | xargs rm -f
  find "${run_path}" -type f -name "*-report.log" | xargs rm -f

  # Delete the log three days ago
  # find ${run_path} -mtime +3 -type f -name "*.log" | xargs rm -f
}

crontab_geo() {
  if [ "${auto_updategeox}" != "false" ] || [ "${auto_updatesubscript}" != "false" ]; then
    echo "${update_interval} ${scripts_dir}/box.tool subgeo" >> "${run_path}/root"
    log debug "Interval crontab geo and subscription (${update_interval})."
    log debug "${bin_name} geox (${auto_updategeox})."
    if [ "${bin_name}" = "clash" ]; then
      log debug "${bin_name} subscription (${auto_updatesubscript})."
    fi
  else
    log info "Crontab geox & subscription is disabled."
  fi
}

detected_port() {
  [ "${port_detect}" = "true" ] && ${scripts_dir}/box.tool port || log warn "${bin_name} skip port detected." && return 1
}

still_alive() {
  if ! pidof ${bin_name} > /dev/null 2>&1 ; then
    log error "${bin_name} service is not running." 
    log error "Please check ${bin_name}.log for more information."
    kill -9 $(pidof ${bin_name}) || killall -9 ${bin_name}
    rm -rf ${pid_file}
    exit 1
  fi
}

check_permission() {
  if [ "${box_user_group}" = "root:net_admin" ] ; then
    if [ ! -f ${bin_path} ] ; then
      log error "kernel ${bin_name} is missing"
      log error "please download and place it in the ${bin_path} directory."
      exit 1
    fi
    chown ${box_user_group} ${bin_path}
    chmod 6755 ${bin_path}
    chown -R ${box_user_group} ${data_dir}
    log info "using kernel directory ${bin_name} in ${bin_path}"
  else
    if which ${bin_name} | grep -q "/system/bin/" ; then
      box_user=$(echo ${box_user_group} | awk -F ':' '{print $1}')
      box_group=$(echo ${box_user_group} | awk -F ':' '{print $2}')
      box_user_id=$(id -u ${box_user})
      box_group_id=$(id -g ${box_group})
      if [ ${box_user_id} ] && [ ${box_group_id} ] ; then
        chown ${box_user_group} ${bin_path}
        chmod 6755 ${bin_path}
        if [ "${box_user_id}" != "0" ] || [ "${box_group_id}" != "3005" ] ; then
          # setcap has been deprecated as it does not support binary outside of the /system/bin directory
          setcap 'cap_net_admin,cap_net_raw,cap_net_bind_service+ep' ${bin_path} || \
            (box_user_group="root:net_admin" && log error "setcap authorization failed, you may need libcap package.")
        fi
        log info "using kernel directory ${bin_name} in ${bin_path}"
        chown -R ${box_user_group} ${data_dir}
      else
        box_user_group="root:net_admin"
        log warn "${box_user_group} error, use root:net_admin instead."
        chown ${box_user_group} ${bin_path}
        chmod 6755 ${bin_path}
        chown -R ${box_user_group} ${data_dir}
        log info "using kernel directory ${bin_name} in ${bin_path}"
      fi
    else
      log error "kernel ${bin_name} is missing"
      log error "please download kernel"
      log error "replace it in the /data/adb/modules/box_for_magisk/system/bin/${bin_name} directory. and reboot "
      exit 1
    fi
  fi
}

check_in_bin() {
  case "${bin_name}" in
    clash)
      test_version=$(${bin_path} -v | grep -v 'clash')
      if ! echo "${test_version}" | grep -qi 'clash'; then
        log error "kernel ${bin_name} corrupted."
      else
        log info "${test_version}"
      fi
  		;;
    sing-box)
      test_version=$(${bin_path} version | grep "${bin_name}")
      if echo "${test_version}" | grep -qi "${bin_name}"; then
          log info "$(${bin_path} version)"
      else
          log error "kernel ${bin_name} corrupted."
      fi
      ;;
    *)
      test_version=$(${bin_path} version | grep -v "${bin_name}")
      if echo "${test_version}" | grep -qi "${bin_name}"; then
          log info "$(${bin_path} version)"
      else
          log error "kernel ${bin_name} corrupted."
      fi
      ;;
  esac
}

create_tun() {
  # Mengaktifkan IP forwarding
  sysctl net.ipv4.ip_forward=1 >/dev/null 2>&1
  # Membuat symlink untuk /dev/tun jika belum ada
  if [ ! -c "/dev/net/tun" ]; then
      mkdir -p /dev/net
      mknod /dev/net/tun c 10 200
  fi
}

default_tp() {
  awk -v new_val="tproxy" '/network_mode/ {$0 = "network_mode=\"" new_val "\""} 1' ${settings} > ${data_dir}/tmp && mv ${data_dir}/tmp ${settings}
}

run_box() {
  log info "client list: ${bin_list[*]}"
  log info "select: ${bin_name}"
  log info "starting ${bin_name} service."
  case "${bin_name}" in
    sing-box)
      # if [ "${network_mode}" = "mixed" ] || [ "${proxy_mode}" = "tun" ] ; then
        # awk '{gsub(/"auto_detect_interface": false/,"\"auto_detect_interface\": true")}1' "${data_dir}/sing-box/config.json" > "${data_dir}/temp" && mv "${data_dir}/temp" "${data_dir}/sing-box/config.json"
        # sleep 0.5
        # awk '{gsub(/auto_route\": true/, "auto_route\": false"); print}' "${data_dir}/sing-box/config.json" > "${data_dir}/temp" && mv "${data_dir}/temp" "${data_dir}/sing-box/config.json"
      # else
        # awk '{gsub(/"auto_detect_interface": true/,"\"auto_detect_interface\": false")}1' "${data_dir}/sing-box/config.json" > "${data_dir}/temp" && mv "${data_dir}/temp" "${data_dir}/sing-box/config.json"
      # fi

      sleep 1
      if ${bin_path} check -D "${data_dir}/${bin_name}" > "${run_path}/${bin_name}-report.log" 2>&1 ; then
        ulimit -n 65535
        nohup setuidgid 0:3005 ${bin_path} run -D "${data_dir}/${bin_name}" > "${run_path}/${bin_name}.log" 2>&1 &
        echo -n $! > "${pid_file}"
      else
        log error "configuration failed, please check the ${run_path}/${bin_name}-report.log file."
        exit 1
      fi
      ;;
    clash)
      if [ "${clash_tun_status}" != "true" ] ; then
        awk -v tproxy_port="${tproxy_port}" '/tproxy-port:/ {$2=tproxy_port} {print}' ${clash_config} > ${data_dir}/tmp && mv ${data_dir}/tmp ${clash_config}
        default_tp
      else
        awk -v new_val="mixed" '/network_mode/ {$0 = "network_mode=\"" new_val "\""} 1' ${settings} > ${data_dir}/tmp && mv ${data_dir}/tmp ${settings}
      fi
      if ${bin_path} -t -d "${data_dir}/${bin_name}" -f "${clash_config}" > "${run_path}/${bin_name}-report.log" 2>&1; then
        ulimit -n 65535
        nohup setuidgid 0:3005 ${bin_path} -d "${data_dir}/${bin_name}" -f "${clash_config}" > "${run_path}/${bin_name}.log" 2>&1 &
        echo -n $! > "${pid_file}"
      else
        log error "configuration failed, please check the ${run_path}/${bin_name}-report.log file."
        exit 1
      fi
      ;;
    xray)
      default_tp
      if [ ! -f "${data_dir}/${bin_name}"/*.json ]; then
        log error "file ${data_dir}/${bin_name}/*.json not found"
        exit 1
      fi
      export XRAY_LOCATION_ASSET="${data_dir}/${bin_name}"
      export XRAY_LOCATION_CONFDIR="${data_dir}/${bin_name}"
      
      if ${bin_path} -test > "${run_path}/${bin_name}-report.log" 2>&1; then
        ulimit -n 65535
        nohup setuidgid 0:3005 ${bin_path} > "${run_path}/${bin_name}.log" 2>&1 &
        echo -n $! > "${pid_file}"
      else
        log error "configuration failed, please check the ${run_path}/${bin_name}-report.log file."
        exit 1
      fi
    ;;
    v2fly)
      default_tp
      if [ ! -f "${data_dir}/${bin_name}"/*.json ] ; then
        log error "file ${data_dir}/v2ray/*.json not found"
        exit 1
      fi
      export V2RAY_LOCATION_ASSET=${data_dir}/${bin_name}
      export V2RAY_LOCATION_CONFDIR=${data_dir}/${bin_name}
      if (${bin_path} test > "${run_path}/${bin_name}-report.log" 2>&1) ; then
        ulimit -n 65535
        nohup setuidgid 0:3005 ${bin_path} run > "${run_path}/${bin_name}.log" 2>&1 &
        echo -n $! > ${pid_file}
      else
        log error "configuration failed, please check the ${run_path}/${bin_name}-report.log file." 
        exit 1
      fi
      ;;
    *)
      log error "kernel error, ${bin_name} write is wrong."
      exit 1
      ;;
  esac
  rm -rf ${run_path}/${bin_name}-report.log
}

cgroup_limit() {
if [ "${cgroup_memory}" = "true" ]; then
  if ${scripts_dir}/box.tool cgroup; then
    log info "cgroup limit: ${cgroup_memory_limit}."
  else
    log error "Failed to enable cgroup for ${bin_name}."
  fi
else
  log info "${bin_name} cgroup: disabled."
fi
}

bin_usage() {
  if bin_pid=$(pidof ${bin_name}) ; then
    rss=$(grep VmRSS /proc/${bin_pid}/status | awk -F':' '{print $2}' | awk '{print $1}')
    [ ${rss} -ge 1024 ] && bin_rss="$(expr ${rss} / 1024)Mb" || bin_rss="${rss}Kb"
    swap=$(grep VmSwap /proc/${bin_pid}/status | awk -F':' '{print $2}' | awk '{print $1}')
    [ ${swap} -ge 1024 ] && bin_swap="$(expr ${swap} / 1024)Mb" || bin_swap="${swap}Kb"
    state=$(grep State /proc/${bin_pid}/status | awk -F':' '{print $2}' | awk '{print $2}')
    log info "${bin_name} has started with the $(stat -c %U:%G /proc/${bin_pid}) user group."
    log info "${bin_name} status: ${state}, PID: (${bin_pid})"
    log info "${bin_name} memory usage: ${bin_rss}, swap: ${bin_swap}"
    cpu=$(/system/bin/ps -p ${bin_pid} -o pcpu | grep -v %CPU | awk '{print $1}' 2> /dev/null)
    [ -n "${cpu}" ] && log info "${bin_name} cpu usage: ${cpu}%" || log info "${bin_name} cpu usage: not available"
    log info "${bin_name} running time: $(/system/bin/ps -p ${bin_pid} -o etime | awk 'NR==2 {print $1}') seconds"
    echo -n ${bin_pid} > ${pid_file}
  else
    log error "${bin_name} is not running"
  fi
}

display_bin_pid() {
  if bin_pid=$(pidof ${bin_name}) ; then
    bin_usage
    log info "${bin_name} service is running. (PID: ${bin_pid})."
  else
    log warn "${bin_name} service is stopped." && return 1
  fi
}

crontab_alive() {
  nohup crond -c ${run_path} > /dev/null 2>&1 &
  crontab -c ${run_path} -r
  touch ${run_path}/root
  chmod 0600 ${run_path}/root
  [ "${static_dns1}" != "" ] && \
    echo "*/1 * * * * ${scripts_dir}/box.tool keepdns" >> ${run_path}/root && log info "dns remains open."
  [ "${bin_name}" = "clash" ] && \
    log info "configuration ${clash_config}."
  crontab_geo
}

start_box() {  
  echo -n "" > ${logs_file}
  [ -t 1 ] && echo "\033[1;31m$(date)\033[0m" || echo "$(date)" | tee -a ${logs_file} >> /dev/null 2>&1
  line="--------------------------------------------" 
  [ -t 1 ] && echo "\033[1;32m$line\033[0m" || echo "$line" | tee -a ${logs_file} >> /dev/null 2>&1

  if bin_pid=$(pidof ${bin_name}) ; then
    log info "${bin_name} service is still running, refreshing iptables"
    if ${scripts_dir}/box.iptables renew; then
      log info "iptables refreshed successfully"
      exit 1
    else
      log error "failed to refresh iptables"
      exit 1
    fi
  else
    log info "Good day"
  fi

  check_permission
  check_in_bin
  delete_logs
  create_tun
  run_box && sleep 1
  [ "${crontab_sec}" != "false" ] && \
    crontab_alive || log info "crontab: disable." 
  cgroup_limit
  sleep 1
  detected_port
  sleep 1
  still_alive
  display_bin_pid
}

stop_box() {
  cronkill=$(/system/bin/ps -ef | grep root | grep "crond -c /data/adb/box/" | awk '{ print $2 }')
  for cron in "${cronkill[@]}"; do
    kill -9 "${cron}"
  done
  
  for bin in "${bin_list[@]}"; do
    kill -9 "$(pidof ${bin})" || killall -9 "${bin}"
  done
  
  sleep 0.5
  
  if ! pidof "${bin_name}" >/dev/null 2>&1; then
    find "${run_path}" -type f -name "box.pid" -delete
    sleep 0.5
    display_bin_pid || log warn "${bin_name} disconnected."
  else
    log error "failed to stop ${bin_name}"
  fi
}

reload() {
  if [ "${bin_name}" = "clash" ] || [ "${bin_name}" = "sing-box" ]; then
    case "${bin_name}" in
      sing-box)
        if ${bin_path} check -D "${data_dir}/${bin_name}" > "${run_path}/${bin_name}-report.log" 2>&1; then
          log info "config.json passed"
        else
          log error "config.json check failed"
          cat "${run_path}/${bin_name}-report.log"
          exit 1
        fi
        ;;
      clash)
        if ${bin_path} -t -d "${data_dir}/clash" -f "${clash_config}" > "${run_path}/${bin_name}-report.log" 2>&1; then
          log info "config.yaml passed"
        else
          log error "config.yaml check failed"
          cat "${run_path}/${bin_name}-report.log"
          exit 1
        fi
        ;;
      *)
        log error "Unknown binary: ${bin_name}"
        exit 1
        ;;
    esac
    log info "Open yacd-meta/configs and click 'Reload Configs'"
  else
    log error "This script is only for clash or sing-box binaries"
  fi
}

case "$1" in
  start)
    stop_box >> /dev/null 2>&1
    start_box
    ;;
  stop)
    stop_box
    ;;
  restart)
    stop_box
    sleep 1
    start_box && ${scripts_dir}/box.iptables renew
    ;;
  usage)
    case "${bin_name}" in
      clash)echo -e "$(${bin_path} -v)";;
      *)echo -e "$(${bin_path} version)";;
    esac
    [ $(pidof ${bin_name}) ] && \
      bin_usage || log warn "${bin_name} service is stopped"
    ;;
  reload)  
    reload
    ;;
  *)
    echo "$0:  usage: $0 {start|testing|stop|restart|usage|reload}"
    ;;
esac
